// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        private static bool initialized;
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            if ((Stetic.Gui.initialized == false)) {
                Stetic.Gui.Initialize();
            }
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "HeapShot.Gui.Widgets.ReferenceTreeViewer")) {
                Gtk.Bin cobj = ((Gtk.Bin)(obj));
                // Widget HeapShot.Gui.Widgets.ReferenceTreeViewer
                BinContainer.Attach(cobj);
                cobj.Events = ((Gdk.EventMask)(256));
                cobj.Name = "HeapShot.Gui.Widgets.ReferenceTreeViewer";
                // Container child HeapShot.Gui.Widgets.ReferenceTreeViewer.Gtk.Container+ContainerChild
                Gtk.VBox w1 = new Gtk.VBox();
                w1.Spacing = 6;
                w1.BorderWidth = ((uint)(6));
                w1.Events = ((Gdk.EventMask)(0));
                w1.Name = "vbox1";
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.ScrolledWindow w2 = new Gtk.ScrolledWindow();
                w2.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                w2.HscrollbarPolicy = ((Gtk.PolicyType)(1));
                w2.ShadowType = ((Gtk.ShadowType)(1));
                w2.CanFocus = true;
                w2.Events = ((Gdk.EventMask)(0));
                w2.Name = "scrolledwindow1";
                // Container child scrolledwindow1.Gtk.Container+ContainerChild
                Gtk.TreeView w3 = new Gtk.TreeView();
                w3.CanFocus = true;
                w3.Events = ((Gdk.EventMask)(0));
                w3.Name = "treeview";
                bindings["treeview"] = w3;
                w2.Add(w3);
                bindings["scrolledwindow1"] = w2;
                w1.Add(w2);
                Gtk.Box.BoxChild w5 = ((Gtk.Box.BoxChild)(w1[w2]));
                w5.Position = 0;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.HBox w6 = new Gtk.HBox();
                w6.Spacing = 6;
                w6.Events = ((Gdk.EventMask)(0));
                w6.Name = "hbox1";
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.HBox w7 = new Gtk.HBox();
                w7.Spacing = 3;
                w7.Events = ((Gdk.EventMask)(0));
                w7.Name = "boxFilter";
                // Container child boxFilter.Gtk.Box+BoxChild
                Gtk.Entry w8 = new Gtk.Entry();
                w8.IsEditable = true;
                w8.InvisibleChar = '‚óè';
                w8.CanFocus = true;
                w8.Events = ((Gdk.EventMask)(0));
                w8.Name = "entryFilter";
                bindings["entryFilter"] = w8;
                w7.Add(w8);
                Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(w7[w8]));
                w9.Position = 0;
                // Container child boxFilter.Gtk.Box+BoxChild
                Gtk.Button w10 = new Gtk.Button();
                w10.CanFocus = true;
                w10.Events = ((Gdk.EventMask)(0));
                w10.Name = "buttonFilter";
                w10.Label = "Filter";
                bindings["buttonFilter"] = w10;
                w7.Add(w10);
                Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(w7[w10]));
                w11.Position = 1;
                w11.Expand = false;
                w11.Fill = false;
                bindings["boxFilter"] = w7;
                w6.Add(w7);
                Gtk.Box.BoxChild w12 = ((Gtk.Box.BoxChild)(w6[w7]));
                w12.Position = 0;
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.CheckButton w13 = new Gtk.CheckButton();
                w13.Label = "Inverse references";
                w13.DrawIndicator = true;
                w13.CanFocus = true;
                w13.Events = ((Gdk.EventMask)(0));
                w13.Name = "checkInverse";
                bindings["checkInverse"] = w13;
                w6.Add(w13);
                Gtk.Box.BoxChild w14 = ((Gtk.Box.BoxChild)(w6[w13]));
                w14.Position = 1;
                w14.Expand = false;
                w14.Fill = false;
                bindings["hbox1"] = w6;
                w1.Add(w6);
                Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w1[w6]));
                w15.Position = 1;
                w15.Expand = false;
                w15.Fill = false;
                bindings["vbox1"] = w1;
                cobj.Add(w1);
                bindings["HeapShot.Gui.Widgets.ReferenceTreeViewer"] = cobj;
                w3.Show();
                w2.Show();
                w8.Show();
                w10.Show();
                w7.Show();
                w13.Show();
                w6.Show();
                w1.Show();
                cobj.Show();
                w8.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnEntryFilterActivated")));
                w10.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButtonFilterClicked")));
                w13.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnCheckInverseClicked")));
            }
            else {
                if ((id == "HeapShot.Gui.Widgets.ObjectMapViewer")) {
                    Gtk.Bin cobj = ((Gtk.Bin)(obj));
                    // Widget HeapShot.Gui.Widgets.ObjectMapViewer
                    BinContainer.Attach(cobj);
                    cobj.Events = ((Gdk.EventMask)(256));
                    cobj.Name = "HeapShot.Gui.Widgets.ObjectMapViewer";
                    // Container child HeapShot.Gui.Widgets.ObjectMapViewer.Gtk.Container+ContainerChild
                    Gtk.HBox w1 = new Gtk.HBox();
                    w1.Spacing = 6;
                    w1.Events = ((Gdk.EventMask)(0));
                    w1.Name = "hbox3";
                    // Container child hbox3.Gtk.Box+BoxChild
                    Gtk.ScrolledWindow w2 = new Gtk.ScrolledWindow();
                    w2.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                    w2.HscrollbarPolicy = ((Gtk.PolicyType)(2));
                    w2.ShadowType = ((Gtk.ShadowType)(1));
                    w2.CanFocus = true;
                    w2.Events = ((Gdk.EventMask)(0));
                    w2.Name = "scrolledwindow2";
                    // Container child scrolledwindow2.Gtk.Container+ContainerChild
                    Gtk.TreeView w3 = new Gtk.TreeView();
                    w3.HeadersVisible = false;
                    w3.CanFocus = true;
                    w3.Events = ((Gdk.EventMask)(0));
                    w3.Name = "fileList";
                    bindings["fileList"] = w3;
                    w2.Add(w3);
                    bindings["scrolledwindow2"] = w2;
                    w1.Add(w2);
                    Gtk.Box.BoxChild w5 = ((Gtk.Box.BoxChild)(w1[w2]));
                    w5.Position = 0;
                    w5.Expand = false;
                    w5.Fill = false;
                    // Container child hbox3.Gtk.Box+BoxChild
                    Gtk.Notebook w6 = new Gtk.Notebook();
                    w6.Scrollable = true;
                    w6.CanFocus = true;
                    w6.Events = ((Gdk.EventMask)(0));
                    w6.Name = "notebook";
                    // Container child notebook.Gtk.Notebook+NotebookChild
                    Gtk.Table w7 = new Gtk.Table(((uint)(3)), ((uint)(2)), false);
                    w7.RowSpacing = ((uint)(6));
                    w7.ColumnSpacing = ((uint)(6));
                    w7.BorderWidth = ((uint)(12));
                    w7.Events = ((Gdk.EventMask)(0));
                    w7.Name = "table1";
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w8 = new Gtk.Label();
                    w8.LabelProp = "";
                    w8.Xalign = 0F;
                    w8.Events = ((Gdk.EventMask)(0));
                    w8.Name = "labelMemory";
                    bindings["labelMemory"] = w8;
                    w7.Add(w8);
                    Gtk.Table.TableChild w9 = ((Gtk.Table.TableChild)(w7[w8]));
                    w9.BottomAttach = ((uint)(3));
                    w9.LeftAttach = ((uint)(1));
                    w9.RightAttach = ((uint)(2));
                    w9.TopAttach = ((uint)(2));
                    w9.YOptions = ((Gtk.AttachOptions)(4));
                    w9.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w10 = new Gtk.Label();
                    w10.LabelProp = "";
                    w10.Xalign = 0F;
                    w10.Events = ((Gdk.EventMask)(0));
                    w10.Name = "labelCount";
                    bindings["labelCount"] = w10;
                    w7.Add(w10);
                    Gtk.Table.TableChild w11 = ((Gtk.Table.TableChild)(w7[w10]));
                    w11.BottomAttach = ((uint)(2));
                    w11.LeftAttach = ((uint)(1));
                    w11.RightAttach = ((uint)(2));
                    w11.TopAttach = ((uint)(1));
                    w11.YOptions = ((Gtk.AttachOptions)(4));
                    w11.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w12 = new Gtk.Label();
                    w12.LabelProp = "";
                    w12.Xalign = 0F;
                    w12.Events = ((Gdk.EventMask)(0));
                    w12.Name = "labelName";
                    bindings["labelName"] = w12;
                    w7.Add(w12);
                    Gtk.Table.TableChild w13 = ((Gtk.Table.TableChild)(w7[w12]));
                    w13.LeftAttach = ((uint)(1));
                    w13.RightAttach = ((uint)(2));
                    w13.YOptions = ((Gtk.AttachOptions)(4));
                    w13.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w14 = new Gtk.Label();
                    w14.LabelProp = "Total memory:";
                    w14.Xalign = 0F;
                    w14.Events = ((Gdk.EventMask)(0));
                    w14.Name = "label5";
                    bindings["label5"] = w14;
                    w7.Add(w14);
                    Gtk.Table.TableChild w15 = ((Gtk.Table.TableChild)(w7[w14]));
                    w15.BottomAttach = ((uint)(3));
                    w15.TopAttach = ((uint)(2));
                    w15.YOptions = ((Gtk.AttachOptions)(4));
                    w15.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w16 = new Gtk.Label();
                    w16.LabelProp = "Object count:";
                    w16.Xalign = 0F;
                    w16.Events = ((Gdk.EventMask)(0));
                    w16.Name = "label4";
                    bindings["label4"] = w16;
                    w7.Add(w16);
                    Gtk.Table.TableChild w17 = ((Gtk.Table.TableChild)(w7[w16]));
                    w17.BottomAttach = ((uint)(2));
                    w17.TopAttach = ((uint)(1));
                    w17.YOptions = ((Gtk.AttachOptions)(4));
                    w17.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w18 = new Gtk.Label();
                    w18.LabelProp = "Name:";
                    w18.Xalign = 0F;
                    w18.Events = ((Gdk.EventMask)(0));
                    w18.Name = "label3";
                    bindings["label3"] = w18;
                    w7.Add(w18);
                    Gtk.Table.TableChild w19 = ((Gtk.Table.TableChild)(w7[w18]));
                    w19.YOptions = ((Gtk.AttachOptions)(4));
                    w19.XOptions = ((Gtk.AttachOptions)(4));
                    bindings["table1"] = w7;
                    w6.Add(w7);
                    Gtk.Notebook.NotebookChild w20 = ((Gtk.Notebook.NotebookChild)(w6[w7]));
                    w20.TabExpand = false;
                    // Notebook tab
                    Gtk.Label w21 = new Gtk.Label();
                    w21.LabelProp = "Summary";
                    w21.Events = ((Gdk.EventMask)(0));
                    w21.Name = "label9";
                    bindings["label9"] = w21;
                    w6.SetTabLabel(w7, w21);
                    // Container child notebook.Gtk.Notebook+NotebookChild
                    HeapShot.Gui.Widgets.ReferenceTreeViewer w22 = new HeapShot.Gui.Widgets.ReferenceTreeViewer();
                    w22.Events = ((Gdk.EventMask)(256));
                    w22.Name = "allObjectsTree";
                    w22.InverseReferences = false;
                    bindings["allObjectsTree"] = w22;
                    w6.Add(w22);
                    Gtk.Notebook.NotebookChild w23 = ((Gtk.Notebook.NotebookChild)(w6[w22]));
                    w23.Position = 1;
                    w23.TabExpand = false;
                    // Notebook tab
                    Gtk.Label w24 = new Gtk.Label();
                    w24.LabelProp = "All objects";
                    w24.Events = ((Gdk.EventMask)(0));
                    w24.Name = "label2";
                    bindings["label2"] = w24;
                    w6.SetTabLabel(w22, w24);
                    bindings["notebook"] = w6;
                    w1.Add(w6);
                    Gtk.Box.BoxChild w25 = ((Gtk.Box.BoxChild)(w1[w6]));
                    w25.Position = 1;
                    bindings["hbox3"] = w1;
                    cobj.Add(w1);
                    bindings["HeapShot.Gui.Widgets.ObjectMapViewer"] = cobj;
                    w3.Show();
                    w2.Show();
                    w8.Show();
                    w10.Show();
                    w12.Show();
                    w14.Show();
                    w16.Show();
                    w18.Show();
                    w7.Show();
                    w21.Show();
                    w22.Show();
                    w24.Show();
                    w6.Show();
                    w1.Show();
                    cobj.Show();
                }
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
        
        private static void Initialize() {
            Gtk.IconFactory w1 = new Gtk.IconFactory();
            Gtk.IconSet w2 = new Gtk.IconSet(Gdk.Pixbuf.LoadFromResource("class.png"));
            w1.Add("class", w2);
            Gtk.IconSet w3 = new Gtk.IconSet(Gdk.Pixbuf.LoadFromResource("field.png"));
            w1.Add("field", w3);
            w1.AddDefault();
        }
    }
    
    internal class BinContainer {
        
        private Gtk.Widget child;
        
        private Gtk.UIManager uimanager;
        
        public static BinContainer Attach(Gtk.Bin bin) {
            BinContainer bc = new BinContainer();
            bin.SizeRequested += new Gtk.SizeRequestedHandler(bc.OnSizeRequested);
            bin.SizeAllocated += new Gtk.SizeAllocatedHandler(bc.OnSizeAllocated);
            bin.Added += new Gtk.AddedHandler(bc.OnAdded);
            return bc;
        }
        
        private void OnSizeRequested(object sender, Gtk.SizeRequestedArgs args) {
            if ((this.child != null)) {
                args.Requisition = this.child.SizeRequest();
            }
        }
        
        private void OnSizeAllocated(object sender, Gtk.SizeAllocatedArgs args) {
            if ((this.child != null)) {
                this.child.Allocation = args.Allocation;
            }
        }
        
        private void OnAdded(object sender, Gtk.AddedArgs args) {
            this.child = args.Widget;
        }
        
        public void SetUiManager(Gtk.UIManager uim) {
            this.uimanager = uim;
            this.child.Realized += new System.EventHandler(this.OnRealized);
        }
        
        private void OnRealized(object sender, System.EventArgs args) {
            if ((this.uimanager != null)) {
                Gtk.Widget w;
                w = this.child.Toplevel;
                if (((w != null) && typeof(Gtk.Window).IsInstanceOfType(w))) {
                    ((Gtk.Window)(w)).AddAccelGroup(this.uimanager.AccelGroup);
                    this.uimanager = null;
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
