// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------



public partial class MainWindow {
    
    private Gtk.Action File;
    
    private Gtk.Action open;
    
    private Gtk.Action quit;
    
    private Gtk.Action MemorySnapshot;
    
    private Gtk.Action @new;
    
    private Gtk.VBox vbox1;
    
    private Gtk.Toolbar toolbar1;
    
    private HeapShot.Gui.Widgets.ObjectMapViewer viewer;
    
    private Gtk.Statusbar statusbar1;
    
    protected virtual void Build() {
        // Widget MainWindow
        Gtk.UIManager w1 = new Gtk.UIManager();
        Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
        this.File = new Gtk.Action("File", "File", null, null);
        this.File.ShortLabel = "File";
        w2.Add(this.File, null);
        this.open = new Gtk.Action("open", null, null, "gtk-open");
        this.open.IsImportant = true;
        w2.Add(this.open, null);
        this.quit = new Gtk.Action("quit", null, null, "gtk-quit");
        this.quit.IsImportant = true;
        w2.Add(this.quit, null);
        this.MemorySnapshot = new Gtk.Action("MemorySnapshot", "Memory snapshot", null, null);
        this.MemorySnapshot.IsImportant = true;
        this.MemorySnapshot.ShortLabel = "Memory snapshot";
        w2.Add(this.MemorySnapshot, null);
        this.@new = new Gtk.Action("new", null, null, "gtk-new");
        this.@new.IsImportant = true;
        w2.Add(this.@new, null);
        w1.InsertActionGroup(w2, 0);
        this.AddAccelGroup(w1.AccelGroup);
        this.Name = "MainWindow";
        this.Title = "Heap Shot";
        // Container child MainWindow.Gtk.Container+ContainerChild
        this.vbox1 = new Gtk.VBox();
        this.vbox1.Name = "vbox1";
        this.vbox1.Spacing = 6;
        // Container child vbox1.Gtk.Box+BoxChild
        w1.AddUiFromString("<ui><toolbar name='toolbar1'><toolitem action='new'/><toolitem action='open'/><toolitem action='quit'/><separator/><toolitem action='MemorySnapshot'/></toolbar></ui>");
        this.toolbar1 = ((Gtk.Toolbar)(w1.GetWidget("/toolbar1")));
        this.toolbar1.Name = "toolbar1";
        this.toolbar1.ShowArrow = false;
        this.toolbar1.Tooltips = true;
        this.toolbar1.ToolbarStyle = ((Gtk.ToolbarStyle)(3));
        this.toolbar1.IconSize = ((Gtk.IconSize)(3));
        this.vbox1.Add(this.toolbar1);
        Gtk.Box.BoxChild w3 = ((Gtk.Box.BoxChild)(this.vbox1[this.toolbar1]));
        w3.Position = 0;
        w3.Expand = false;
        w3.Fill = false;
        // Container child vbox1.Gtk.Box+BoxChild
        this.viewer = new HeapShot.Gui.Widgets.ObjectMapViewer();
        this.viewer.Events = ((Gdk.EventMask)(256));
        this.viewer.Name = "viewer";
        this.vbox1.Add(this.viewer);
        Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(this.vbox1[this.viewer]));
        w4.Position = 1;
        // Container child vbox1.Gtk.Box+BoxChild
        this.statusbar1 = new Gtk.Statusbar();
        this.statusbar1.Name = "statusbar1";
        this.statusbar1.Spacing = 2;
        this.vbox1.Add(this.statusbar1);
        Gtk.Box.BoxChild w5 = ((Gtk.Box.BoxChild)(this.vbox1[this.statusbar1]));
        w5.Position = 2;
        w5.Expand = false;
        w5.Fill = false;
        this.Add(this.vbox1);
        if ((this.Child != null)) {
            this.Child.ShowAll();
        }
        this.DefaultWidth = 711;
        this.DefaultHeight = 466;
        this.Show();
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.open.Activated += new System.EventHandler(this.OnOpenActivated);
        this.quit.Activated += new System.EventHandler(this.OnQuitActivated);
        this.MemorySnapshot.Activated += new System.EventHandler(this.OnMemorySnapshotActivated);
        this.@new.Activated += new System.EventHandler(this.OnNewActivated);
    }
}
