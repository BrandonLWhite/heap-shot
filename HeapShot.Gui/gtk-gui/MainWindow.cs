
// This file has been generated by the GUI designer. Do not modify.

public partial class MainWindow
{
	private global::Gtk.UIManager UIManager;
	private global::Gtk.Action File;
	private global::Gtk.Action open;
	private global::Gtk.Action quit;
	private global::Gtk.Action MemorySnapshot;
	private global::Gtk.Action @new;
	private global::Gtk.VBox vbox1;
	private global::Gtk.Toolbar toolbar1;
	private global::HeapShot.Gui.Widgets.ObjectMapViewer viewer;
	private global::Gtk.Statusbar statusbar1;

	protected virtual void Build ()
	{
		global::Stetic.Gui.Initialize (this);
		// Widget MainWindow
		this.UIManager = new global::Gtk.UIManager ();
		global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup ("Default");
		this.File = new global::Gtk.Action ("File", global::Mono.Unix.Catalog.GetString ("File"), null, null);
		this.File.ShortLabel = "File";
		w1.Add (this.File, null);
		this.open = new global::Gtk.Action ("open", null, null, "gtk-open");
		this.open.IsImportant = true;
		w1.Add (this.open, null);
		this.quit = new global::Gtk.Action ("quit", null, null, "gtk-quit");
		this.quit.IsImportant = true;
		w1.Add (this.quit, null);
		this.MemorySnapshot = new global::Gtk.Action ("MemorySnapshot", global::Mono.Unix.Catalog.GetString ("Memory snapshot"), null, null);
		this.MemorySnapshot.IsImportant = true;
		this.MemorySnapshot.ShortLabel = "Memory snapshot";
		w1.Add (this.MemorySnapshot, null);
		this.@new = new global::Gtk.Action ("new", null, null, "gtk-new");
		this.@new.IsImportant = true;
		w1.Add (this.@new, null);
		this.UIManager.InsertActionGroup (w1, 0);
		this.AddAccelGroup (this.UIManager.AccelGroup);
		this.Name = "MainWindow";
		this.Title = global::Mono.Unix.Catalog.GetString ("Heap Shot");
		// Container child MainWindow.Gtk.Container+ContainerChild
		this.vbox1 = new global::Gtk.VBox ();
		this.vbox1.Name = "vbox1";
		this.vbox1.Spacing = 6;
		// Container child vbox1.Gtk.Box+BoxChild
		this.UIManager.AddUiFromString ("<ui><toolbar name='toolbar1'><toolitem name='new' action='new'/><toolitem name='open' action='open'/><toolitem name='quit' action='quit'/><separator/><toolitem name='MemorySnapshot' action='MemorySnapshot'/></toolbar></ui>");
		this.toolbar1 = ((global::Gtk.Toolbar)(this.UIManager.GetWidget ("/toolbar1")));
		this.toolbar1.Name = "toolbar1";
		this.toolbar1.ShowArrow = false;
		this.toolbar1.ToolbarStyle = ((global::Gtk.ToolbarStyle)(3));
		this.toolbar1.IconSize = ((global::Gtk.IconSize)(3));
		this.vbox1.Add (this.toolbar1);
		global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.toolbar1]));
		w2.Position = 0;
		w2.Expand = false;
		w2.Fill = false;
		// Container child vbox1.Gtk.Box+BoxChild
		this.viewer = new global::HeapShot.Gui.Widgets.ObjectMapViewer ();
		this.viewer.Events = ((global::Gdk.EventMask)(256));
		this.viewer.Name = "viewer";
		this.vbox1.Add (this.viewer);
		global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.viewer]));
		w3.Position = 1;
		// Container child vbox1.Gtk.Box+BoxChild
		this.statusbar1 = new global::Gtk.Statusbar ();
		this.statusbar1.Name = "statusbar1";
		this.statusbar1.Spacing = 2;
		this.vbox1.Add (this.statusbar1);
		global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.statusbar1]));
		w4.Position = 2;
		w4.Expand = false;
		w4.Fill = false;
		this.Add (this.vbox1);
		if ((this.Child != null)) {
			this.Child.ShowAll ();
		}
		this.DefaultWidth = 711;
		this.DefaultHeight = 466;
		this.Show ();
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.DeleteEvent += new global::Gtk.DeleteEventHandler (this.OnDeleteEvent);
		this.open.Activated += new global::System.EventHandler (this.OnOpenActivated);
		this.quit.Activated += new global::System.EventHandler (this.OnQuitActivated);
		this.MemorySnapshot.Activated += new global::System.EventHandler (this.OnMemorySnapshotActivated);
		this.@new.Activated += new global::System.EventHandler (this.OnNewActivated);
	}
}
